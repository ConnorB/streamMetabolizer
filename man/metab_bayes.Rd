% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metab_bayes.R
\name{metab_bayes}
\alias{metab_bayes}
\title{Basic Bayesian metabolism model fitting function}
\usage{
metab_bayes(specs = specs(mm_name("bayes")), data = mm_data(solar.time,
  DO.obs, DO.sat, depth, temp.water, light, discharge, optional = "discharge"),
  data_daily = mm_data(date, discharge.daily, optional = "all"),
  info = NULL)
}
\arguments{
\item{specs}{a list of model specifications and parameters for a model. 
Although this may be specified manually (it's just a list), it is easier
and safer to use \code{\link{specs}} to generate the list, because the set
of required parameters and their defaults depends on the model given in the
\code{model_name} argument to \code{specs}. The help file for 
\code{\link{specs}} lists the necessary parameters, describes them in 
detail, and gives default values.}

\item{data}{data.frame of input data at the temporal resolution of raw 
observations (unit-value). Columns must have the same names, units, and 
format as the default. The solar.time column must also have a timezone code
('tzone' attribute) of 'UTC'. See the \strong{'Formatting \code{data}'} 
section below for a full description.}

\item{data_daily}{data.frame containing inputs with a daily timestep. See the
\strong{'Formatting \code{data_daily}'} section below for a full 
description.}

\item{info}{any information, in any format, that you would like to store 
within the metab_model object}
}
\value{
A metab_bayes object containing the fitted model. This object can be 
  inspected with the functions in the \code{\link{metab_model_interface}} and
  also \code{\link{get_mcmc}}.
}
\description{
Fits a Bayesian model to estimate GPP and ER from input data on DO, 
temperature, light, etc. See \code{\link{mm_name}} to choose a Bayesian model
and \code{\link{specs}} for relevant options for the \code{specs} 
argument.
}
\examples{
\dontrun{
dat <- data_metab('3', res='30')
# fast-ish model version, but still too slow to auto-run in examples
mm <- metab_bayes(data=dat,
  specs(mm_name('bayes', err_proc_iid=FALSE, engine='jags'), 
    n_cores=3, n_chains=3, burnin_steps=300, saved_steps=100))
mm
get_fitting_time(mm)
predict_metab(mm)
plot_DO_preds(predict_DO(mm))

# test that error-free models can be run with split or combined dates, jags or stan
sp <- function(split_dates, engine) { replace(
  specs(mm_name('bayes', err_proc_iid=FALSE, engine=engine), 
    n_cores=3, n_chains=3, burnin_steps=300, saved_steps=100, verbose=FALSE), 
  'split_dates', split_dates
) }
dat <- data_metab('1', res='30')
mm <- metab(sp(FALSE,'jags'), dat)
mm <- metab(sp(TRUE, 'jags'), dat)
# new compilation of any Stan model gives deprecation warnings as of 7/12/16; THESE ARE OKAY
mm <- metab(sp(FALSE,'stan'), dat)
# subsequent runs of the compiled Stan model are quieter
mm <- metab(sp(TRUE, 'stan'), dat)
dat <- data_metab('3', res='30')
mm <- metab(sp(FALSE,'jags'), dat)
mm <- metab(sp(TRUE, 'jags'), dat)
mm <- metab(sp(FALSE,'stan'), dat)
mm <- metab(sp(TRUE, 'stan'), dat)

# error and warning messages are printed with the mm object if present
dat <- data_metab('1', res='30', flaws=c('missing start'))
mm <- metab(sp(FALSE,'jags'), dat)
mm <- metab(sp(TRUE, 'jags'), dat)
mm <- metab(sp(FALSE,'stan'), dat)
mm <- metab(sp(TRUE, 'stan'), dat)
dat <- data_metab('3', res='30', flaws=c('missing middle'))
mm <- metab(sp(FALSE,'jags'), dat)
mm <- metab(sp(TRUE, 'jags'), dat)
mm <- metab(sp(FALSE,'stan'), dat)
mm <- metab(sp(TRUE, 'stan'), dat)
}
}
\author{
Alison Appling, Bob Hall
}
\seealso{
Other metab_model: \code{\link{metab_Kmodel}},
  \code{\link{metab_mle}}, \code{\link{metab_night}},
  \code{\link{metab_sim}}
}

