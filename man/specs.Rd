% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/specs.R
\name{specs}
\alias{specs}
\title{Generate a coherent list of model specs}
\usage{
specs(model_name = mm_name(), engine, day_start = 4, day_end = 28,
  day_tests = c("full_day", "even_timesteps", "complete_data"),
  init.GPP.daily = 5, init.Pmax = 10, init.alpha = 1e-04,
  init.ER.daily = -10, init.ER20 = -10, init.K600.daily = 10, split_dates,
  keep_mcmcs = TRUE, keep_mcmc_data = TRUE, GPP_daily_mu = 8,
  GPP_daily_sigma = 4, ER_daily_mu = -10, ER_daily_sigma = 5,
  K600_daily_meanlog = log(6), K600_daily_meanlog_meanlog = log(6),
  K600_daily_meanlog_sdlog = 1,
  K600_daily_sdlog = switch(mm_parse_name(model_name)$pool_K600, none = 1,
  0.2), lnK600_lnQ_intercept_mu = 2, lnK600_lnQ_intercept_sigma = 2.4,
  lnK600_lnQ_slope_mu = 0, lnK600_lnQ_slope_sigma = 0.5,
  K600_lnQ_nodes_centers = -3:3, K600_lnQ_nodediffs_sdlog = 0.05,
  K600_lnQ_nodes_meanlog = rep(log(6), length(K600_lnQ_nodes_centers)),
  K600_lnQ_nodes_sdlog = rep(1, length(K600_lnQ_nodes_centers)),
  err_obs_iid_sigma_scale = 0.1, err_proc_acor_phi_alpha = 1,
  err_proc_acor_phi_beta = 1, err_proc_acor_sigma_scale = 0.1,
  err_proc_iid_sigma_scale = 0.1, params_in, params_out, n_chains = 4,
  n_cores = 4, burnin_steps = 500, saved_steps = 500, thin_steps = 1,
  verbose = FALSE, weights = c("K600/CI"), filters = c(CI.max = NA,
  discharge.daily.max = NA, velocity.daily.max = NA),
  predictors = c("discharge.daily"), transforms = c(K600 = "log", date = NA,
  velocity.daily = "log", discharge.daily = "log"), other_args = c(),
  K600_lnQ_cnode_meanlog = log(6), K600_lnQ_cnode_sdlog = 1,
  K600_lnQ_nodediffs_meanlog = 0.2,
  lnK600_lnQ_nodes = "sim_Kb(specs, K600_lnQ_nodes_centers)",
  lnK600_daily_predlog = "predict_Kb(K600_lnQ_nodes_centers, lnK600_lnQ_nodes, log(discharge.daily))",
  discharge_daily = 7, DO_mod_1 = NULL, K600_daily = 10, GPP_daily = 5,
  Pmax = 10, alpha = 1e-04, ER_daily = -10, ER20 = -10,
  err_obs_sigma = 0.01, err_obs_phi = 0, err_proc_sigma = 0.2,
  err_proc_phi = 0, err_round = NA, sim_seed = NA)
}
\arguments{
\item{model_name}{character string identifying the model features. Use 
\code{\link{mm_name}} to create a valid name based on desired attributes, 
or \code{\link{mm_valid_names}} to see all valid names. Two alternatives to
the names given by \code{mm_valid_names()} are also accepted: (1) a model 
type as accepted by the \code{type} argument to \code{mm_name}, which will 
be used to create the default model name for that model type, or (2) a full
model file path for custom Bayesian models, as long as basename(model_name)
can still be parsed correctly with \code{mm_parse_name()} and the file 
exists. In that case the file may be specified either as a file path 
relative to the streamMetabolizer models directory (the first assumption; 
this directory can be found with \code{system.file("models", 
package="streamMetabolizer")}) or as an absolute path or a path relative to
the current working directory (the second assumption, if the first 
assumption turns up no files of the given name).}

\item{engine}{The software or function to use in fitting the model. Should be
specified via \code{mm_name} rather than here. For \code{type='bayes'}, 
always \code{'stan'} indicating the software package to use for the MCMC 
process (see http://mc-stan.org/). For types in 
\code{c('mle','night','sim')} there's again only one option per model (R 
functions; these need not be named here but will be noted in the suffix of 
the model name, e.g., \code{"m_np_oi_tr_plrckm.nlm"} uses \code{nlm()} for 
model fitting). For type='Kmodel', the name of an interpolation or 
regression method relating K to the predictor[s] of choice. One of 
\code{c("mean", "lm", "loess")}.}

\item{day_start}{start time (inclusive) of a day's data in number of hours 
from the midnight that begins the date. For example, day_start=-1.5 
indicates that data describing 2006-06-26 begin at 2006-06-25 22:30, or at 
the first observation time that occurs after that time if day_start doesn't
fall exactly on an observation time. For metabolism models working with 
single days of input data, it is conventional/useful to begin the day the 
evening before, e.g., -1.5, and to end just before the next sunrise, e.g., 
30. For multiple consecutive days, it may make the most sense to start just
before sunrise (e.g., 4) and to end 24 hours later. For nighttime 
regression, the date assigned to a chunk of data should be the date whose 
evening contains the data. The default is therefore 12 to 36 for 
metab_night, of which the times of darkness will be used.}

\item{day_end}{end time (exclusive) of a day's data in number of hours from 
the midnight that begins the date. For example, day_end=30 indicates that 
data describing 2006-06-26 end at the last observation time that occurs 
before 2006-06-27 06:00. See day_start for recommended start and end times.}

\item{day_tests}{list of tests to conduct to determine whether each date 
worth of data is valid for modeling. the results of these tests will be 
passed to \code{model_fun} as the \code{ply_validity} argument to that 
function.}

\item{init.GPP.daily}{the inital value of daily mean GPP (gO2 d^-1 m^-2) to 
use in the NLM fitting process. See the MLE Initial Values section under 
Details.}

\item{init.Pmax}{the initial value of Pmax (gO2 d^-1 m^-2) to use in the GPP 
versus light relationship in the NLM fitting process. Pmax is the maximum 
GPP value of the GPP-light curve. See the MLE Initial Values section under 
Details.}

\item{init.alpha}{the inital value of alpha (gO2 s d^-1 umol^-1, i.e., units 
of GPP/light) to use in the GPP versus light relationship in the NLM 
fitting process. alpha is the initial slope of the GPP-light curve. See the
MLE Initial Values section under Details.}

\item{init.ER.daily}{the inital value of daily mean ER (gO2 d^-1 m^-2) to use
in the NLM fitting process. See the MLE Initial Values section under 
Details.}

\item{init.ER20}{the initial value of ER20 (gO2 d^-1 m^-2) to use in the ER 
versus temperature relationship in the NLM fitting process. ER20 is the 
respiration rate at 20 degrees C. See the MLE Initial Values section under 
Details.}

\item{init.K600.daily}{the inital value of daily mean K600 (d^-1) to use in 
the NLM fitting process. Ignored if K600 is supplied in data_daily, except 
for those dates where K600 is NA. If there are any such dates, K600_init 
must have a numeric (non-NA) value, as this will be used to estimate K600 
for those dates. See the MLE Initial Values section under Details.}

\item{split_dates}{logical indicating whether the data should be split into 
daily chunks first (TRUE) or processed within one big model (FALSE). If 
valid days differ in their timestep length, split_dates will need to be 
TRUE; otherwise, FALSE is generally more efficient. FALSE is also the only 
appropriate solution for a hierarchical model that pools information on 
error, K600, etc. across days.}

\item{keep_mcmcs}{TRUE, FALSE, or (for nopool models) a vector of dates 
(coerced with as.Date if character, etc.) indicating whether to keep all of
the mcmc model objects (TRUE), none of them (FALSE), or specific dates. The
default is TRUE because these objects often need inspecting.}

\item{keep_mcmc_data}{FALSE, TRUE, or (for nopool models) a vector of dates 
(coerced with as.Date if character, etc.) indicating whether to keep all of
the mcmc model objects (TRUE), none of them (FALSE), or specific dates. The
default is FALSE because these objects can be very large.}

\item{GPP_daily_mu}{The mean of a dnorm distribution for GPP_daily, the daily
rate of gross primary production}

\item{GPP_daily_sigma}{The standard deviation of a dnorm distribution for 
GPP_daily, the daily rate of gross primary production}

\item{ER_daily_mu}{The mean of a dnorm distribution for ER_daily, the daily 
rate of ecosystem respiration}

\item{ER_daily_sigma}{The standard deviation of a dnorm distribution for 
ER_daily, the daily rate of ecosystem respiration}

\item{K600_daily_meanlog}{Applies when pool_K600 is 'none'. The mean of a 
dlnorm distribution for K600_daily, the daily rate of reaeration}

\item{K600_daily_meanlog_meanlog}{hyperparameter for pool_K600='normal'. The 
mean parameter (meanlog_meanlog) of a lognormal distribution of meanlog in 
K ~ lN(meanlog, sdlog), meanlog ~ lN(meanlog_meanlog, meanlog_sdlog)}

\item{K600_daily_meanlog_sdlog}{hyperparameter for pool_K600='normal'. The 
standard deviation parameter (meanlog_sdlog) of a lognormal distribution of
meanlog in K ~ lN(meanlog, sdlog), meanlog ~ lN(meanlog_meanlog, 
meanlog_sdlog)}

\item{K600_daily_sdlog}{The lognormal scale parameter (standard deviation) of
a dlnorm distribution having meanlog equal to \code{K600_daily_meanlog} 
(when pool_K600 is 'none') or \code{K600_daily_pred} (otherwise) for 
K600_daily, the daily rate of reaeration}

\item{lnK600_lnQ_intercept_mu}{hyperparameter for pool_K600 == 'linear'. The 
mean of the prior distribution for the intercept parameter in 
\code{log(K600) ~ lnK600_lnQ_intercept + lnK600_lnQ_slope*log(Q)}}

\item{lnK600_lnQ_intercept_sigma}{hyperparameter for pool_K600 == 'linear'. 
The standard deviation of the prior distribution for the intercept 
parameter in \code{log(K600) ~ lnK600_lnQ_intercept + 
lnK600_lnQ_slope*log(Q)}}

\item{lnK600_lnQ_slope_mu}{hyperparameter for pool_K600='linear'. The mean of
the prior distribution for the slope parameter in \code{log(K600) ~ 
lnK600_lnQ_intercept + lnK600_lnQ_slope*log(Q)}}

\item{lnK600_lnQ_slope_sigma}{hyperparameter for pool_K600='linear'. The 
standard deviation of the prior distribution for the slope parameter in 
\code{log(K600) ~ lnK600_lnQ_intercept + lnK600_lnQ_slope*log(Q)}}

\item{K600_lnQ_nodes_centers}{data configuration argument for 
pool_K600='binned'. numeric vector giving the natural-log-space centers of 
the discharge bins. See also \code{\link{calc_bins}}}

\item{K600_lnQ_nodediffs_sdlog}{hyperparameter for pool_K600='binned'. The 
standard deviations of the differences in estimated K600 between successive
lnQ_nodes (bins), where the means of those differences are always zero}

\item{K600_lnQ_nodes_meanlog}{hyperparameter for pool_K600='binned'. The 
means of lognormal prior distributions for the K600_lnQ_nodes parameters.}

\item{K600_lnQ_nodes_sdlog}{hyperparameter for pool_K600='binned'. The 
standard deviations of lognormal prior distributions for the K600_lnQ_nodes
parameters.}

\item{err_obs_iid_sigma_scale}{The scale (= sigma) parameter of a half-Cauchy
distribution for err_obs_iid_sigma, the standard deviation of the 
observation error. Visualize the PDF of err_obs_iid_sigma with 
\code{\link{plot_distribs}}.}

\item{err_proc_acor_phi_alpha}{The alpha (= shape1) parameter on a beta 
distribution for err_proc_acor_phi, the autocorrelation coefficient for the
autocorrelated component of process [& sometimes observation] error. 
Visualize the PDF of err_proc_acor_phi with \code{\link{plot_distribs}}.}

\item{err_proc_acor_phi_beta}{The beta (= shape2) parameter on a beta 
distribution for err_proc_acor_phi, the autocorrelation coefficient for the
autocorrelated component of process [& sometimes observation] error. 
Visualize the PDF of err_proc_acor_phi with \code{\link{plot_distribs}}.}

\item{err_proc_acor_sigma_scale}{The scale (= sigma) parameter of a 
half-Cauchy distribution for err_proc_acor_sigma, the standard deviation of
the autocorrelated component of process [& sometimes observation] error. 
Visualize the PDF of err_proc_acor_sigma with \code{\link{plot_distribs}}.}

\item{err_proc_iid_sigma_scale}{The scale (= sigma) parameter of a 
half-Cauchy distribution for err_proc_iid_sigma, the standard deviation of 
the uncorrelated (IID) component of process [& sometimes observation] 
error. Visualize the PDF of err_proc_iid_sigma with 
\code{\link{plot_distribs}}.}

\item{params_in}{Character vector of hyperparameters to pass from the specs 
list into the data list for the MCMC run. Will be automatically generated 
during the specs() call; need only be revised if you're using a custom 
model that requires different hyperparameters.}

\item{params_out}{a character vector of parameters whose values in the MCMC 
runs should be recorded and summarized}

\item{n_chains}{the number of chains to run}

\item{n_cores}{the number of cores to apply to this run}

\item{burnin_steps}{the number of steps per chain to run and ignore before 
starting to collect MCMC 'data'}

\item{saved_steps}{the number of MCMC steps per chain to save}

\item{thin_steps}{the number of steps to move before saving another step. 1 
means save all steps.}

\item{verbose}{logical. give status messages?}

\item{weights}{For Kmodel, character vector indicating the type of weighting 
to use. Set to c() for no weights. One of c("1/CI", "K600/CI", c()).}

\item{filters}{For Kmodel, named numeric vector of limits to use in filtering
data_daily. Elements may include
c("CI.max","discharge.daily.max","velocity.daily.max"). If an element is
given, the corresponding filter is applied: K600.daily.upper-K600.daily.lower <=
CI.max, discharge.daily <= discharge.daily.max, velocity.daily <= 
velocity.daily.max}

\item{predictors}{For Kmodel, character vector of variables (column names in 
data or data_daily) to use in predicting K. Leave blank or set to c() for 
no predictors. Otherwise, one or more of these may be included: c("date", 
"velocity.daily", "discharge.daily").}

\item{transforms}{For Kmodel, a named character vector of names of functions 
(probably 'log' or NA) to apply to K600.daily and/or the predictors. K600.daily should 
probably be logged. The vector names must match the values of 
\code{predictors}, although not all elements of \code{predictors} must be 
included in \code{transforms}. Recommended transforms include 
\code{c(K600.daily='log', date=NA, velocity.daily="log", discharge.daily="log")}}

\item{other_args}{Other arguments passed to the fitting function given by 
\code{specs$engine}. \code{na.rm=TRUE} is already passed to 
\code{mean} (which is actually implemented as \code{sum}, anyway).}

\item{K600_lnQ_cnode_meanlog}{For a sim model with pool_K600='binned'. The
mean of a lognormal distribution describing the y=K600 value of the middle
(or just past middle) node in the piecewise lnK ~ lnQ relationship}

\item{K600_lnQ_cnode_sdlog}{For a sim model with pool_K600='binned'. The sd
of a lognormal distribution describing the y=K600 value of the middle (or
just past middle) node in the piecewise lnK ~ lnQ relationship}

\item{K600_lnQ_nodediffs_meanlog}{For a sim model with pool_K600='binned'.
The average (in log space) difference between ln(K) values of successive
nodes. A non-zero value introduces a trend in K ~ Q.}

\item{err_obs_sigma}{The sd of observation error, or 0 for no observation 
error. Observation errors are those applied to DO.mod after generating the 
full time series of modeled values.}

\item{err_obs_phi}{The autocorrelation coefficient of the observation errors,
or 0 for uncorrelated errors.}

\item{err_proc_sigma}{The sd of process error, or 0 for no process error. 
Process errors are applied at each time step, and therefore propagate into 
the next timestep.}

\item{err_proc_phi}{The autocorrelation coefficient of the process errors, or
0 for uncorrelated errors.}

\item{err_round}{NA for no effect, or an integer as in the \code{digits} 
argument to \code{\link{round}} if simulated DO.obs should be rounded to 
the given number of digits beyond \code{.}.}

\item{sim_seed}{NA to specify that each call to predict_DO should generate 
new values, or an integer, as in the \code{seed} argument to 
\code{\link{set.seed}}, specifying the seed to set before every execution 
of predict_DO}
}
\value{
an internally consistent list of arguments that may be passed to 
  \code{metab} as the \code{specs} argument
}
\description{
Generates an internally consistent list of model specifications that may be 
passed to \code{metab_bayes}, \code{metab_mle}, etc. via the \code{specs} 
argument. This help file gives the definitive list of all possible model 
specs, but only a subset of these are relevant to any given 
\code{model_name}. See the 'Relevant arguments' section below. Irrelevant 
arguments for the given \code{model_name} should not be explicitly passed 
into this function (but don't worry - we'll just stop and tell you if you 
make a mistake). Relevant arguments for the given \code{model_name} either 
have default values or do not (see Usage). Relevant arguments without a 
default should rarely be overridden, because their values will be determined 
based on other arguments. Relevant arguments that do have a default can, and 
often should, be overridden to tailor the model to your needs.
}
\section{Relevant arguments}{

  
  * metab_bayes: Always relevant: \code{model_name, engine, split_dates, 
  keep_mcmcs, keep_mcmc_data, day_start, day_end, day_tests, GPP_daily_mu, 
  GPP_daily_sigma, ER_daily_mu, ER_daily_sigma, params_in, params_out, 
  n_chains, n_cores, burnin_steps, saved_steps, thin_steps, verbose}. The 
  need for other arguments depends on features of the model structure, as 
  from \code{mm_parse_name(model_name)}: \itemize{ \item If 
  \code{$pool_K600=='none'} then \code{K600_daily_meanlog, K600_daily_sdlog}.
  \item If \code{$pool_K600=='normal'} then \code{K600_daily_meanlog_meanlog,
  K600_daily_meanlog_sdlog, K600_daily_sdlog}. \item If 
  \code{pool_K600=='linear'} then \code{lnK600_lnQ_intercept_mu, 
  lnK600_lnQ_intercept_sigma, lnK600_lnQ_slope_mu, lnK600_lnQ_slope_sigma, 
  K600_daily_sdlog}. \item If \code{pool_K600=='binned'} then 
  \code{K600_lnQ_nodes_centers, K600_lnQ_nodediffs_sdlog, 
  K600_lnQ_nodes_meanlog, K600_lnQ_nodes_sdlog, K600_daily_sdlog}. \item If 
  \code{err_obs_iid} then \code{err_obs_iid_sigma_scale}. \item If 
  \code{err_proc_acor} then \code{err_proc_acor_phi_alpha, 
  err_proc_acor_phi_beta, err_proc_acor_sigma_scale}. \item If 
  \code{err_proc_iid} then \code{ err_proc_iid_sigma_scale}.}
  
  * metab_mle: \code{model_name, day_start, day_end, day_tests, 
  init.GPP.daily, init.Pmax, init.alpha, init.ER.daily, init.ER20, 
  init.K600.daily}
  
  * metab_night: \code{model_name, day_start, day_end, day_tests}
  
  * metab_Kmodel: \code{model_name, engine, day_start, day_end, day_tests, 
  weights, filters, predictors, transforms, other_args}. Note that the 
  defaults for \code{weights}, \code{predictors}, \code{filters}, and 
  \code{transforms} are adjusted according to the \code{engine} implied by 
  \code{model_name}.
  
  * metab_sim: \code{model_name, day_start, day_end, day_tests, 
  err_obs_sigma, err_obs_phi, err_proc_sigma, err_proc_phi, sim_seed}
}

\section{MLE Initial Values}{

  
  For metab_mle models (maximum likelihood estimation), specification 
  arguments whose names begin with \code{init} are applicable. Which 
  arguments are required depends on the value of model_name and can be 
  determined by calling \code{grep('^init.', names(specs(mname)), 
  value=TRUE)} once for your model name \code{mname} before supplying any 
  arguments.
}
\examples{
specs(mm_name(type='mle', err_obs_iid=FALSE, err_proc_iid=TRUE))
specs(mm_name(type='bayes', pool_K600='normal'))
}

