% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metab_Kmodel.R
\name{metab_Kmodel}
\alias{metab_Kmodel}
\title{Combine a time series of K estimates to predict consistent values}
\usage{
metab_Kmodel(specs = specs(mm_name("Kmodel")), data = mm_data(solar.time,
  discharge, velocity, optional = c("all")), data_daily = mm_data(date,
  K600.daily, K600.daily.lower, K600.daily.upper, discharge.daily,
  velocity.daily, optional = c("K600.daily.lower", "K600.daily.upper",
  "discharge.daily", "velocity.daily")), info = NULL)
}
\arguments{
\item{specs}{a list of model specifications and parameters for a model. 
Although this may be specified manually (it's just a list), it is easier
and safer to use \code{\link{specs}} to generate the list, because the set
of required parameters and their defaults depends on the model given in the
\code{model_name} argument to \code{specs}. The help file for 
\code{\link{specs}} lists the necessary parameters, describes them in 
detail, and gives default values.}

\item{data}{data.frame of input data at the temporal resolution of raw 
observations (unit-value). Columns must have the same names, units, and 
format as the default. The solar.time column must also have a timezone code
('tzone' attribute) of 'UTC'. See the \strong{'Formatting \code{data}'} 
section below for a full description.}

\item{data_daily}{data.frame containing inputs with a daily timestep. See the
\strong{'Formatting \code{data_daily}'} section below for a full 
description.}

\item{info}{any information, in any format, that you would like to store 
within the metab_model object}
}
\value{
A metab_Kmodel object containing the fitted model. This object can be 
  inspected with the functions in the \code{\link{metab_model_interface}}.
}
\description{
Takes daily estimates of K, usually from nighttime regression, and regresses 
against predictors such as discharge.daily. Returns a metab_Kmodel object
that only predicts daily K, nothing else.
}
\details{
Possible approaches:

\itemize{

\item{"mean"}{Predict K as the mean of all K values}

\item{"weighted mean"}{Predict K as the mean of all K values, weighted by the
inverse of the confidence intervals in the input K values}

\item{"KvQ"}{Regress K versus Q, tending toward overall mean in ranges of Q 
with sparse data}

\item{"weighted KvQ"}{Regress K versus Q, tending toward overall mean in 
ranges of Q with sparse data, weighting high-confidence K values more 
heavily}

\item{"T smoother"}{Predict K using a loess or spline smoother over time}

\item{"Q smoother"}{Predict K using a loess or spline smoother over 
discharge.daily}

\item{"TQ smoother"}{Predict K using a loess or spline smoother over both 
time and discharge.daily}

}
}
\examples{
library(dplyr)
# create example data
set.seed(24842)
example_Ks <- data.frame(date=seq(as.Date("2012-08-15"),as.Date("2012-09-15"),
  as.difftime(1,units='days')), discharge.daily=exp(rnorm(32,2,1)), K600.daily=rnorm(32,30,4)) \%>\%
  mutate(K600.daily.lower=K600.daily-5, K600.daily.upper=K600.daily+6)

# mean
mm <- metab_Kmodel(
  specs(mm_name('Kmodel', engine='mean')), 
  data_daily=example_Ks) # two warnings expected for engine='mean'
get_params(mm)

# linear model
mm <- metab_Kmodel(
  specs(mm_name('Kmodel', engine='lm'), predictors='discharge.daily'),
  data_daily=example_Ks)
get_params(mm)

# loess
mm <- metab_Kmodel(    ### breaks ###
  specs(mm_name('Kmodel', engine='loess'), predictors='date', other_args=list(span=0.4)),
  data_daily=example_Ks)
get_params(mm)

## 3-phase workflow (sort of like complete pooling) for estimating K within 
## days, then K across days, then GPP and ER within days

# 1. data and specifications for both of the MLE models
dat <- data_metab('10','15')
mle_specs <- specs(mm_name('mle'))

# fit a first-round MLE and extract the K estimates
mm1 <- metab_mle(mle_specs, data=dat)
K600_mm1 <- get_params(mm1, uncertainty='ci') \%>\% select(date, K600.daily, K600.daily.lower, K600.daily.upper)

# smooth the K600s
mm2 <- metab_Kmodel(specs(mm_name('Kmodel', engine='mean'), 
  day_start=-1, day_end=23), data_daily=K600_mm1)
K600_mm2 <- get_params(mm2) \%>\% select(date, K600.daily)

# refit the MLE with fixed K
mm3 <- metab_mle(mle_specs, data=dat, data_daily=K600_mm2)
get_params(mm3, fixed='stars')
predict_metab(mm3)
}
\author{
Alison Appling
}
\seealso{
Other metab_model: \code{\link{metab_bayes}},
  \code{\link{metab_mle}}, \code{\link{metab_night}},
  \code{\link{metab_sim}}
}

