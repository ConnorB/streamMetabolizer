# b_Kn_oipc_eu_plrcko.jags

data {
  for(i in 1:(n-1)) {
    # Coefficients by lag (e.g., frac_GPP[i] applies to the DO step from i to i+1)
    coef_GPP[1:d,i]  <- frac_GPP[1:d,i] / depth[1:d,i]
    coef_ER[1:d,i]   <- frac_ER[1:d,i] / depth[1:d,i]
    coef_K600_full[1:d,i] <- KO2_conv[1:d,i] * frac_D[1:d,i] *
      (DO_sat[1:d,i] - DO_obs[1:d,i])
    # dDO observations
    dDO_obs[1:d,i] <- DO_obs[1:d,i+1] - DO_obs[1:d,i]
  }
}

model {
  # Rescale pooling & error distribution parameters
  # lnN(location,scale) = exp(location)*(exp(N(0,1))^scale)
  K600_daily_sigma <- exp(K600_daily_sigma_location) * pow(exp(K600_daily_sigma_scaled), K600_daily_sigma_scale)
  err_obs_iid_sigma <- exp(err_obs_iid_sigma_location) * pow(exp(err_obs_iid_sigma_scaled), err_obs_iid_sigma_scale)
  err_proc_acor_sigma <- exp(err_proc_acor_sigma_location) * pow(exp(err_proc_acor_sigma_scaled), err_proc_acor_sigma_scale)
  
  # Model DO time series
  # * Euler version
  # * observation error
  # * autocorrelated process error
  # * reaeration depends on DO_obs
  
  err_proc_acor[1:d,1] <- err_proc_acor_inc[1:d,1]
  for(i in 1:(n-2)) {
    err_proc_acor[1:d,i+1] <- err_proc_acor_phi * err_proc_acor[1:d,i] + err_proc_acor_inc[1:d,i+1]
  }
  
  # dDO model
  for(i in 1:(n-1)) {
    dDO_mod[1:d,i] <- 
      err_proc_acor[1:d,i] +
      GPP_daily  * coef_GPP[1:d,i] +
      ER_daily   * coef_ER[1:d,i] +
      K600_daily * coef_K600_full[1:d,i]
  }
  
  # DO model
  DO_mod[1:d,1] <- DO_obs_1
  for(i in 1:(n-1)) {
    DO_mod[1:d,i+1] <- (
      DO_mod[1:d,i] +
      dDO_mod[1:d,i] + err_proc_iid[1:d,i])
  }

  # Process error
  for(i in 1:(n-1)) {
    for(j in 1:d) {
      # Autocorrelated process error
      err_proc_acor_inc[j,i] ~ dnorm(0, pow(err_proc_acor_sigma, -2))
    }
  }
  # Autocorrelation (phi) & SD (sigma) of the process errors
  err_proc_acor_phi ~ beta(err_proc_acor_phi_alpha, err_proc_acor_phi_beta)
  err_proc_acor_sigma_scaled ~ dnorm(0, pow(1, -2))
  
  # Independent, identically distributed observation error
  for(i in 2:n) {
    for(j in 1:d) {
      DO_obs[j,i] ~ dnorm(DO_mod[j,i], pow(err_obs_iid_sigma, -2))
    }
  }
  # SD (sigma) of the observation errors
  err_obs_iid_sigma_scaled ~ dnorm(0, pow(1, -2))
  
  # Daily metabolism priors
  for(j in 1:d) {
    GPP_daily[j] ~ dnorm(GPP_daily_mu, pow(GPP_daily_sigma, -2))
    ER_daily[j] ~ dnorm(ER_daily_mu, pow(ER_daily_sigma, -2))
    K600_daily[j] ~ dnorm(K600_daily_mu, pow(K600_daily_sigma, -2))
  }

  # Hierarchical constraints on K600_daily (normal model)
  K600_daily_mu ~ dnorm(K600_daily_mu_mu, pow(K600_daily_mu_sigma, -2))
  K600_daily_sigma_scaled ~ dnorm(0, pow(1, -2))
}
